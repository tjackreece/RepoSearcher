{"ast":null,"code":"var _jsxFileName = \"/Users/timothyjackreece/Desktop/fold/reposearcher/src/App.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { DatastoreContext } from \"./context/DatastoreProvider\";\nimport Navbar from \"./components/Navigation/Navbar\";\nimport RepositoryInfomation from \"./components/RepositoryInfo/RepositoryInformation\";\nimport { getRepository } from \"./controller/controller\";\nimport Alert from \"@mui/material/Alert\";\nimport Button from \"@mui/material/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    datastore,\n    datastoreActions\n  } = useContext(DatastoreContext);\n  const [repos, setRepos] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [noResultsFound, setNoResultsFound] = useState(false);\n  DataGenerator(repositiory, colorArray);\n  async function getReposByOrganization() {\n    let orgName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"NETFLIX\";\n    setIsLoading(true);\n    const url = `https://api.github.com/orgs/${orgName}/repos`;\n    const targetURL = new URL(url);\n    try {\n      const response = await axios.get(targetURL);\n      if (response.status === 200) {\n        setIsLoading(false);\n        return setRepos(response.data);\n      } else {\n        setIsLoading(false);\n      }\n    } catch (error) {\n      setIsLoading(false);\n    }\n  }\n  useEffect(() => {\n    const repoInfo = getRepository(\"Netflix\");\n    Promise.all([repoInfo]).then(values => {\n      datastoreActions.setRepo(values[0]);\n      datastoreActions.setIsLoading(false);\n    });\n  }, [datastoreActions]);\n  useEffect(() => {\n    if (!datastore.datastoreLoading) {\n      if (datastore.repos.length > 0) {\n        setRepos(datastore.repos);\n        setIsLoading(false);\n      }\n    }\n  }, [datastore]);\n  const handleSearch = searchInput => {\n    const repoInfo = getRepository(searchInput);\n    Promise.all([repoInfo]).then(values => {\n      if (values[0].length > 0) {\n        datastoreActions.setRepo(values[0]);\n        setIsLoading(false);\n      } else {\n        setNoResultsFound(true);\n        setIsLoading(true);\n      }\n    });\n  };\n  const resetDatabase = () => {\n    handleSearch(\"Netflix\");\n    setNoResultsFound(false);\n    setIsLoading(true);\n  };\n  const handleNoResults = () => {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      action: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: resetDatabase,\n        color: \"inherit\",\n        size: \"small\",\n        children: \"RELOAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this),\n      severity: \"error\",\n      children: \"Repository not found, please press the button to the right and try another repository.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      search: handleSearch,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), noResultsFound && handleNoResults(), /*#__PURE__*/_jsxDEV(RepositoryInfomation, {\n      repositories: repos,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"PJHAhCcp9o/DPCcKS5+9K3Lmoso=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useContext","useEffect","useState","DatastoreContext","Navbar","RepositoryInfomation","getRepository","Alert","Button","App","datastore","datastoreActions","repos","setRepos","isLoading","setIsLoading","noResultsFound","setNoResultsFound","DataGenerator","repositiory","colorArray","getReposByOrganization","orgName","url","targetURL","URL","response","axios","get","status","data","error","repoInfo","Promise","all","then","values","setRepo","datastoreLoading","length","handleSearch","searchInput","resetDatabase","handleNoResults"],"sources":["/Users/timothyjackreece/Desktop/fold/reposearcher/src/App.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { DatastoreContext } from \"./context/DatastoreProvider\";\nimport Navbar from \"./components/Navigation/Navbar\";\nimport RepositoryInfomation from \"./components/RepositoryInfo/RepositoryInformation\";\nimport { getRepository } from \"./controller/controller\";\nimport Alert from \"@mui/material/Alert\";\nimport Button from \"@mui/material/Button\";\n\nfunction App() {\n  const { datastore, datastoreActions } = useContext(DatastoreContext);\n  const [repos, setRepos] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [noResultsFound, setNoResultsFound] = useState(false);\n\n  DataGenerator(repositiory, colorArray);\n\n  async function getReposByOrganization(orgName = \"NETFLIX\") {\n    setIsLoading(true);\n    const url = `https://api.github.com/orgs/${orgName}/repos`;\n    const targetURL = new URL(url);\n    try {\n      const response = await axios.get(targetURL);\n      if (response.status === 200) {\n        setIsLoading(false);\n        return setRepos(response.data);\n      } else {\n        setIsLoading(false);\n      }\n    } catch (error) {\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    const repoInfo = getRepository(\"Netflix\");\n    Promise.all([repoInfo]).then((values) => {\n      datastoreActions.setRepo(values[0]);\n      datastoreActions.setIsLoading(false);\n    });\n  }, [datastoreActions]);\n  useEffect(() => {\n    if (!datastore.datastoreLoading) {\n      if (datastore.repos.length > 0) {\n        setRepos(datastore.repos);\n        setIsLoading(false);\n      }\n    }\n  }, [datastore]);\n\n  const handleSearch = (searchInput) => {\n    const repoInfo = getRepository(searchInput);\n    Promise.all([repoInfo]).then((values) => {\n      if (values[0].length > 0) {\n        datastoreActions.setRepo(values[0]);\n        setIsLoading(false);\n      } else {\n        setNoResultsFound(true);\n        setIsLoading(true);\n      }\n    });\n  };\n  const resetDatabase = () => {\n    handleSearch(\"Netflix\");\n    setNoResultsFound(false);\n    setIsLoading(true);\n  };\n\n  const handleNoResults = () => {\n    return (\n      <Alert\n        action={\n          <Button onClick={resetDatabase} color=\"inherit\" size=\"small\">\n            RELOAD\n          </Button>\n        }\n        severity=\"error\"\n      >\n        Repository not found, please press the button to the right and try\n        another repository.\n      </Alert>\n    );\n  };\n  return (\n    <>\n      <Navbar search={handleSearch} isLoading={isLoading} />\n      {noResultsFound && handleNoResults()}\n      <RepositoryInfomation repositories={repos} isLoading={isLoading} />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}