{"ast":null,"code":"var _jsxFileName = \"/Users/timothyjackreece/Desktop/fold/reposearcher/src/App.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { DatastoreContext } from \"./context/DatastoreProvider\";\nimport Navbar from \"./components/Navigation/Navbar\";\nimport RepositoryInfomation from \"./components/RepositoryInfo/RepositoryInformation\";\nimport { getRepository } from \"./controller/controller\";\nimport Alert from \"@mui/material/Alert\";\nimport Button from \"@mui/material/Button\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    datastore,\n    datastoreActions\n  } = useContext(DatastoreContext);\n  const [repos, setRepos] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setIsError] = useState(false);\n\n  // DataGenerator(repositiory, colorArray);\n  const getRepository = async organizationName => {\n    setIsLoading(true);\n    try {\n      const response = await axios.get(`https://api.github.com/orgs/${organizationName}/repos`);\n      setIsLoading(false);\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n    }\n  };\n  useEffect(() => {\n    const repoInfo = getRepository(\"Netflix\");\n    Promise.all([repoInfo]).then(values => {\n      datastoreActions.setRepo(values[0]);\n      datastoreActions.setIsLoading(false);\n    });\n  }, [datastoreActions]);\n  useEffect(() => {\n    if (!datastore.datastoreLoading) {\n      if (datastore.repos.length > 0) {\n        setRepos(datastore.repos);\n        setIsLoading(false);\n      }\n    }\n  }, [datastore]);\n  const handleSearch = searchInput => {\n    const repoInfo = getRepository(searchInput);\n    Promise.all([repoInfo]).then(values => {\n      if (values[0].length > 0) {\n        datastoreActions.setRepo(values[0]);\n        setIsLoading(false);\n      } else {\n        setIsError(true);\n        setIsLoading(true);\n      }\n    });\n  };\n  const resetDatabase = () => {\n    handleSearch(\"Netflix\");\n    setIsError(false);\n    setIsLoading(true);\n  };\n  const handleNoResults = () => {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      action: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: resetDatabase,\n        color: \"inherit\",\n        size: \"small\",\n        children: \"RELOAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this),\n      severity: \"error\",\n      children: \"Repository not found, please press the button to the right and try another repository.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      search: handleSearch,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), error && handleNoResults(), /*#__PURE__*/_jsxDEV(RepositoryInfomation, {\n      repositories: repos,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"2Ir3xwEl7oq+gWgtxdWk+Fl5Kss=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useContext","useEffect","useState","DatastoreContext","Navbar","RepositoryInfomation","getRepository","Alert","Button","axios","App","datastore","datastoreActions","repos","setRepos","isLoading","setIsLoading","error","setIsError","organizationName","response","get","status","data","repoInfo","Promise","all","then","values","setRepo","datastoreLoading","length","handleSearch","searchInput","resetDatabase","handleNoResults"],"sources":["/Users/timothyjackreece/Desktop/fold/reposearcher/src/App.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { DatastoreContext } from \"./context/DatastoreProvider\";\nimport Navbar from \"./components/Navigation/Navbar\";\nimport RepositoryInfomation from \"./components/RepositoryInfo/RepositoryInformation\";\nimport { getRepository } from \"./controller/controller\";\nimport Alert from \"@mui/material/Alert\";\nimport Button from \"@mui/material/Button\";\nimport axios from \"axios\";\nfunction App() {\n  const { datastore, datastoreActions } = useContext(DatastoreContext);\n  const [repos, setRepos] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setIsError] = useState(false);\n\n  // DataGenerator(repositiory, colorArray);\n  const getRepository = async (organizationName) => {\n    setIsLoading(true);\n    try {\n      const response = await axios.get(\n        `https://api.github.com/orgs/${organizationName}/repos`\n      );\n      setIsLoading(false);\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    const repoInfo = getRepository(\"Netflix\");\n    Promise.all([repoInfo]).then((values) => {\n      datastoreActions.setRepo(values[0]);\n      datastoreActions.setIsLoading(false);\n    });\n  }, [datastoreActions]);\n  useEffect(() => {\n    if (!datastore.datastoreLoading) {\n      if (datastore.repos.length > 0) {\n        setRepos(datastore.repos);\n        setIsLoading(false);\n      }\n    }\n  }, [datastore]);\n\n  const handleSearch = (searchInput) => {\n    const repoInfo = getRepository(searchInput);\n    Promise.all([repoInfo]).then((values) => {\n      if (values[0].length > 0) {\n        datastoreActions.setRepo(values[0]);\n        setIsLoading(false);\n      } else {\n        setIsError(true);\n        setIsLoading(true);\n      }\n    });\n  };\n  const resetDatabase = () => {\n    handleSearch(\"Netflix\");\n    setIsError(false);\n    setIsLoading(true);\n  };\n\n  const handleNoResults = () => {\n    return (\n      <Alert\n        action={\n          <Button onClick={resetDatabase} color=\"inherit\" size=\"small\">\n            RELOAD\n          </Button>\n        }\n        severity=\"error\"\n      >\n        Repository not found, please press the button to the right and try\n        another repository.\n      </Alert>\n    );\n  };\n  return (\n    <>\n      <Navbar search={handleSearch} isLoading={isLoading} />\n      {error && handleNoResults()}\n      <RepositoryInfomation repositories={repos} isLoading={isLoading} />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}