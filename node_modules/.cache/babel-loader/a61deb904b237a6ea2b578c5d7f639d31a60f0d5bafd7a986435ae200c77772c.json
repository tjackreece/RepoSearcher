{"ast":null,"code":"var _jsxFileName = \"/Users/timothyjackreece/Desktop/fold/reposearcher/src/utility/DataGenerator.js\";\nimport { getLanguages } from \"../controller/controller\";\nimport { TableCell, TableRow } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport StarIcon from \"@mui/icons-material/Star\";\nimport ForkRightIcon from \"@mui/icons-material/ForkRight\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataGenerator = (repoOBJ, colorArray) => {\n  const repoFormattedData = [];\n  repoOBJ.forEach(async repo => {\n    var _colorArray$find;\n    const {\n      name,\n      language,\n      description,\n      stargazers_count,\n      forks_count,\n      created_at,\n      full_name\n    } = repo;\n    let repoName = \"\";\n    if (name) {\n      repoName = name;\n    }\n    let repoLanguage = \"\";\n    if (language) {\n      repoLanguage = language;\n    } else {\n      const Lang = await getLanguages(full_name).then(lang => Object.keys(lang).join(\", \"));\n      repoLanguage = Lang || null;\n    }\n    let repoDescription = \"\";\n    if (description) {\n      repoDescription = description;\n    } else {\n      repoDescription = \"No description provided\";\n    }\n    let starCount = 0;\n    if (stargazers_count) {\n      starCount = stargazers_count;\n    }\n    let forkCount = 0;\n    if (forks_count) {\n      forkCount = forks_count;\n    }\n    let dateCreated = new Date(Date.now());\n    if (created_at) {\n      dateCreated = created_at;\n    }\n    const repoInfo = {\n      repoName,\n      repoLanguage,\n      repoDescription,\n      starCount,\n      forkCount,\n      dateCreated,\n      full_name,\n      langColor: ((_colorArray$find = colorArray.find(col => col.name === language)) === null || _colorArray$find === void 0 ? void 0 : _colorArray$find.color) || \"#000000\"\n      // commitData: formattedCommitData,\n    };\n\n    repoFormattedData.push(repoInfo);\n  });\n  return repoFormattedData.sort(function (a, b) {\n    return b.starCount - a.starCount;\n  });\n};\n_c = DataGenerator;\nexport const headerGenerator = headers => {\n  return /*#__PURE__*/_jsxDEV(TableRow, {\n    children: headers.map((head, i) => {\n      return /*#__PURE__*/_jsxDEV(TableCell, {\n        sx: i === 0 ? {\n          fontWeight: \"bold\"\n        } : {\n          fontWeight: \"bold\",\n          textAlign: \"center\"\n        },\n        children: head\n      }, head + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\nexport const rowGenerator = data => {\n  return data.map((el, i) => {\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: Object.keys(el).map((commit, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n        align: i === 0 ? \"left\" : \"center\",\n        scope: \"row\",\n        children: commit === \"DateCreated\" ? new Date(el[commit]).toLocaleString() : el[commit]\n      }, el[commit], false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, el.Title + i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  });\n};\nexport const FrontDetails = repoDetails => {\n  return [{\n    icon: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"dot\",\n      style: {\n        height: \"15px\",\n        width: \"15px\",\n        backgroundColor: repoDetails.langColor,\n        borderRadius: \"50%\",\n        margin: \"auto .5rem auto auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this),\n    detail: /*#__PURE__*/_jsxDEV(Typography, {\n      size: \"small\",\n      children: [\" \", repoDetails.repoLanguage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }, this),\n    key: repoDetails.full_name\n  }, {\n    icon: /*#__PURE__*/_jsxDEV(StarIcon, {\n      className: \"star\",\n      style: {\n        stroke: \"#ffe135\",\n        color: \"#ffe135\",\n        margin: \"auto .2rem auto auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this),\n    detail: /*#__PURE__*/_jsxDEV(Typography, {\n      size: \"small\",\n      children: [\" \", repoDetails.starCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }, this),\n    key: repoDetails.full_name\n  }, {\n    icon: /*#__PURE__*/_jsxDEV(ForkRightIcon, {\n      className: \"star\",\n      style: {\n        margin: \"auto .2rem auto auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this),\n    detail: /*#__PURE__*/_jsxDEV(Typography, {\n      size: \"small\",\n      children: [\" \", repoDetails.forkCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }, this),\n    key: repoDetails.full_name\n  }, {\n    icon: /*#__PURE__*/_jsxDEV(\"span\", {\n      // className=\"label\"\n      style: {\n        // backgroundColor: langColor,\n        fontWeight: \"bold\",\n        margin: \"auto .5rem auto auto\"\n      },\n      children: \"Date Created:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this),\n    detail: /*#__PURE__*/_jsxDEV(Typography, {\n      size: \"small\",\n      children: [\" \", new Date(repoDetails.dateCreated).toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this),\n    key: repoDetails.full_name\n  }];\n};\n_c2 = FrontDetails;\nvar _c, _c2;\n$RefreshReg$(_c, \"DataGenerator\");\n$RefreshReg$(_c2, \"FrontDetails\");","map":{"version":3,"names":["getLanguages","TableCell","TableRow","Typography","StarIcon","ForkRightIcon","DataGenerator","repoOBJ","colorArray","repoFormattedData","forEach","repo","name","language","description","stargazers_count","forks_count","created_at","full_name","repoName","repoLanguage","Lang","then","lang","Object","keys","join","repoDescription","starCount","forkCount","dateCreated","Date","now","repoInfo","langColor","find","col","color","push","sort","a","b","headerGenerator","headers","map","head","i","fontWeight","textAlign","rowGenerator","data","el","commit","toLocaleString","Title","FrontDetails","repoDetails","icon","height","width","backgroundColor","borderRadius","margin","detail","key","stroke"],"sources":["/Users/timothyjackreece/Desktop/fold/reposearcher/src/utility/DataGenerator.js"],"sourcesContent":["import { getLanguages } from \"../controller/controller\";\nimport { TableCell, TableRow } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport StarIcon from \"@mui/icons-material/Star\";\nimport ForkRightIcon from \"@mui/icons-material/ForkRight\";\nexport const DataGenerator = (repoOBJ, colorArray) => {\n  const repoFormattedData = [];\n\n  repoOBJ.forEach(async (repo) => {\n    const {\n      name,\n      language,\n      description,\n      stargazers_count,\n      forks_count,\n      created_at,\n      full_name,\n    } = repo;\n    let repoName = \"\";\n    if (name) {\n      repoName = name;\n    }\n\n    let repoLanguage = \"\";\n\n    if (language) {\n      repoLanguage = language;\n    } else {\n      const Lang = await getLanguages(full_name).then((lang) =>\n        Object.keys(lang).join(\", \")\n      );\n      repoLanguage = Lang || null;\n    }\n    let repoDescription = \"\";\n\n    if (description) {\n      repoDescription = description;\n    } else {\n      repoDescription = \"No description provided\";\n    }\n\n    let starCount = 0;\n    if (stargazers_count) {\n      starCount = stargazers_count;\n    }\n    let forkCount = 0;\n    if (forks_count) {\n      forkCount = forks_count;\n    }\n    let dateCreated = new Date(Date.now());\n    if (created_at) {\n      dateCreated = created_at;\n    }\n\n    const repoInfo = {\n      repoName,\n      repoLanguage,\n      repoDescription,\n      starCount,\n      forkCount,\n      dateCreated,\n      full_name,\n      langColor:\n        colorArray.find((col) => col.name === language)?.color || \"#000000\",\n      // commitData: formattedCommitData,\n    };\n    repoFormattedData.push(repoInfo);\n  });\n\n  return repoFormattedData.sort(function (a, b) {\n    return b.starCount - a.starCount;\n  });\n};\nexport const headerGenerator = (headers) => {\n  return (\n    <TableRow>\n      {headers.map((head, i) => {\n        return (\n          <TableCell\n            key={head + i}\n            sx={\n              i === 0\n                ? {\n                    fontWeight: \"bold\",\n                  }\n                : {\n                    fontWeight: \"bold\",\n                    textAlign: \"center\",\n                  }\n            }\n          >\n            {head}\n          </TableCell>\n        );\n      })}\n    </TableRow>\n  );\n};\nexport const rowGenerator = (data) => {\n  return data.map((el, i) => {\n    return (\n      <TableRow key={el.Title + i}>\n        {Object.keys(el).map((commit, i) => (\n          <TableCell\n            key={el[commit]}\n            align={i === 0 ? \"left\" : \"center\"}\n            scope=\"row\"\n          >\n            {commit === \"DateCreated\"\n              ? new Date(el[commit]).toLocaleString()\n              : el[commit]}\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  });\n};\nexport const FrontDetails = (repoDetails) => {\n  return [\n    {\n      icon: (\n        <span\n          className=\"dot\"\n          style={{\n            height: \"15px\",\n            width: \"15px\",\n            backgroundColor: repoDetails.langColor,\n            borderRadius: \"50%\",\n            margin: \"auto .5rem auto auto\",\n          }}\n        />\n      ),\n      detail: <Typography size=\"small\"> {repoDetails.repoLanguage}</Typography>,\n      key: repoDetails.full_name,\n    },\n    {\n      icon: (\n        <StarIcon\n          className=\"star\"\n          style={{\n            stroke: \"#ffe135\",\n            color: \"#ffe135\",\n            margin: \"auto .2rem auto auto\",\n          }}\n        />\n      ),\n      detail: <Typography size=\"small\"> {repoDetails.starCount}</Typography>,\n      key: repoDetails.full_name,\n    },\n    {\n      icon: (\n        <ForkRightIcon\n          className=\"star\"\n          style={{\n            margin: \"auto .2rem auto auto\",\n          }}\n        />\n      ),\n      detail: <Typography size=\"small\"> {repoDetails.forkCount}</Typography>,\n      key: repoDetails.full_name,\n    },\n    {\n      icon: (\n        <span\n          // className=\"label\"\n          style={{\n            // backgroundColor: langColor,\n            fontWeight: \"bold\",\n            margin: \"auto .5rem auto auto\",\n          }}\n        >\n          Date Created:\n        </span>\n      ),\n      detail: (\n        <Typography size=\"small\">\n          {\" \"}\n          {new Date(repoDetails.dateCreated).toLocaleString()}\n        </Typography>\n      ),\n      key: repoDetails.full_name,\n    },\n  ];\n};\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AACnD,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,aAAa,MAAM,+BAA+B;AAAC;AAC1D,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAO,EAAEC,UAAU,KAAK;EACpD,MAAMC,iBAAiB,GAAG,EAAE;EAE5BF,OAAO,CAACG,OAAO,CAAC,MAAOC,IAAI,IAAK;IAAA;IAC9B,MAAM;MACJC,IAAI;MACJC,QAAQ;MACRC,WAAW;MACXC,gBAAgB;MAChBC,WAAW;MACXC,UAAU;MACVC;IACF,CAAC,GAAGP,IAAI;IACR,IAAIQ,QAAQ,GAAG,EAAE;IACjB,IAAIP,IAAI,EAAE;MACRO,QAAQ,GAAGP,IAAI;IACjB;IAEA,IAAIQ,YAAY,GAAG,EAAE;IAErB,IAAIP,QAAQ,EAAE;MACZO,YAAY,GAAGP,QAAQ;IACzB,CAAC,MAAM;MACL,MAAMQ,IAAI,GAAG,MAAMrB,YAAY,CAACkB,SAAS,CAAC,CAACI,IAAI,CAAEC,IAAI,IACnDC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,CAC7B;MACDN,YAAY,GAAGC,IAAI,IAAI,IAAI;IAC7B;IACA,IAAIM,eAAe,GAAG,EAAE;IAExB,IAAIb,WAAW,EAAE;MACfa,eAAe,GAAGb,WAAW;IAC/B,CAAC,MAAM;MACLa,eAAe,GAAG,yBAAyB;IAC7C;IAEA,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIb,gBAAgB,EAAE;MACpBa,SAAS,GAAGb,gBAAgB;IAC9B;IACA,IAAIc,SAAS,GAAG,CAAC;IACjB,IAAIb,WAAW,EAAE;MACfa,SAAS,GAAGb,WAAW;IACzB;IACA,IAAIc,WAAW,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,CAAC;IACtC,IAAIf,UAAU,EAAE;MACda,WAAW,GAAGb,UAAU;IAC1B;IAEA,MAAMgB,QAAQ,GAAG;MACfd,QAAQ;MACRC,YAAY;MACZO,eAAe;MACfC,SAAS;MACTC,SAAS;MACTC,WAAW;MACXZ,SAAS;MACTgB,SAAS,EACP,qBAAA1B,UAAU,CAAC2B,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACxB,IAAI,KAAKC,QAAQ,CAAC,qDAA/C,iBAAiDwB,KAAK,KAAI;MAC5D;IACF,CAAC;;IACD5B,iBAAiB,CAAC6B,IAAI,CAACL,QAAQ,CAAC;EAClC,CAAC,CAAC;EAEF,OAAOxB,iBAAiB,CAAC8B,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAC5C,OAAOA,CAAC,CAACb,SAAS,GAAGY,CAAC,CAACZ,SAAS;EAClC,CAAC,CAAC;AACJ,CAAC;AAAC,KAnEWtB,aAAa;AAoE1B,OAAO,MAAMoC,eAAe,GAAIC,OAAO,IAAK;EAC1C,oBACE,QAAC,QAAQ;IAAA,UACNA,OAAO,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;MACxB,oBACE,QAAC,SAAS;QAER,EAAE,EACAA,CAAC,KAAK,CAAC,GACH;UACEC,UAAU,EAAE;QACd,CAAC,GACD;UACEA,UAAU,EAAE,MAAM;UAClBC,SAAS,EAAE;QACb,CACL;QAAA,UAEAH;MAAI,GAZAA,IAAI,GAAGC,CAAC;QAAA;QAAA;QAAA;MAAA,QAaH;IAEhB,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACO;AAEf,CAAC;AACD,OAAO,MAAMG,YAAY,GAAIC,IAAI,IAAK;EACpC,OAAOA,IAAI,CAACN,GAAG,CAAC,CAACO,EAAE,EAAEL,CAAC,KAAK;IACzB,oBACE,QAAC,QAAQ;MAAA,UACNtB,MAAM,CAACC,IAAI,CAAC0B,EAAE,CAAC,CAACP,GAAG,CAAC,CAACQ,MAAM,EAAEN,CAAC,kBAC7B,QAAC,SAAS;QAER,KAAK,EAAEA,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,QAAS;QACnC,KAAK,EAAC,KAAK;QAAA,UAEVM,MAAM,KAAK,aAAa,GACrB,IAAIrB,IAAI,CAACoB,EAAE,CAACC,MAAM,CAAC,CAAC,CAACC,cAAc,EAAE,GACrCF,EAAE,CAACC,MAAM;MAAC,GANTD,EAAE,CAACC,MAAM,CAAC;QAAA;QAAA;QAAA;MAAA,QAQlB;IAAC,GAXWD,EAAE,CAACG,KAAK,GAAGR,CAAC;MAAA;MAAA;MAAA;IAAA,QAYhB;EAEf,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMS,YAAY,GAAIC,WAAW,IAAK;EAC3C,OAAO,CACL;IACEC,IAAI,eACF;MACE,SAAS,EAAC,KAAK;MACf,KAAK,EAAE;QACLC,MAAM,EAAE,MAAM;QACdC,KAAK,EAAE,MAAM;QACbC,eAAe,EAAEJ,WAAW,CAACtB,SAAS;QACtC2B,YAAY,EAAE,KAAK;QACnBC,MAAM,EAAE;MACV;IAAE;MAAA;MAAA;MAAA;IAAA,QAEL;IACDC,MAAM,eAAE,QAAC,UAAU;MAAC,IAAI,EAAC,OAAO;MAAA,WAAC,GAAC,EAACP,WAAW,CAACpC,YAAY;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc;IACzE4C,GAAG,EAAER,WAAW,CAACtC;EACnB,CAAC,EACD;IACEuC,IAAI,eACF,QAAC,QAAQ;MACP,SAAS,EAAC,MAAM;MAChB,KAAK,EAAE;QACLQ,MAAM,EAAE,SAAS;QACjB5B,KAAK,EAAE,SAAS;QAChByB,MAAM,EAAE;MACV;IAAE;MAAA;MAAA;MAAA;IAAA,QAEL;IACDC,MAAM,eAAE,QAAC,UAAU;MAAC,IAAI,EAAC,OAAO;MAAA,WAAC,GAAC,EAACP,WAAW,CAAC5B,SAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc;IACtEoC,GAAG,EAAER,WAAW,CAACtC;EACnB,CAAC,EACD;IACEuC,IAAI,eACF,QAAC,aAAa;MACZ,SAAS,EAAC,MAAM;MAChB,KAAK,EAAE;QACLK,MAAM,EAAE;MACV;IAAE;MAAA;MAAA;MAAA;IAAA,QAEL;IACDC,MAAM,eAAE,QAAC,UAAU;MAAC,IAAI,EAAC,OAAO;MAAA,WAAC,GAAC,EAACP,WAAW,CAAC3B,SAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc;IACtEmC,GAAG,EAAER,WAAW,CAACtC;EACnB,CAAC,EACD;IACEuC,IAAI,eACF;MACE;MACA,KAAK,EAAE;QACL;QACAV,UAAU,EAAE,MAAM;QAClBe,MAAM,EAAE;MACV,CAAE;MAAA,UACH;IAED;MAAA;MAAA;MAAA;IAAA,QACD;IACDC,MAAM,eACJ,QAAC,UAAU;MAAC,IAAI,EAAC,OAAO;MAAA,WACrB,GAAG,EACH,IAAIhC,IAAI,CAACyB,WAAW,CAAC1B,WAAW,CAAC,CAACuB,cAAc,EAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAEtD;IACDW,GAAG,EAAER,WAAW,CAACtC;EACnB,CAAC,CACF;AACH,CAAC;AAAC,MAlEWqC,YAAY;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}